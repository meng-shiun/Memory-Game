{"version":3,"sources":["card.js","deck.js","statusBoard.js","main.js"],"names":["Card","name","slot","board","document","querySelector","isTriggered","selectedSlot","children","classList","add","remove","card1","card2","cards","setTimeout","forEach","c","body","el","isFlipped","contains","replace","Deck","cardsPair","deckCards","cardA","cardB","cardC","cardD","cardE","cardF","cardG","cardH","push","cardsCount","takenSlots","shuffleDeck","card","i","randomId","Math","floor","random","indexOf","innerHTML","sort","a","b","insertAdjacentHTML","slotID","StatusBoard","moveCount","maxClick","matchCount","starsCount","matchQueue","threeStars","twoStars","oneStar","selectedCard","cardsMatch","cardsNoMatch","deck","statusBoard","move","statusMoves","stars","resetBtn","timerShown","scoreTimer","scoreBoard","timeElapsed","Number","textContent","timer","addEventListener","shuffle","buildCards","buildCardsHTML","init","e","target","cardID","parentNode","id","currentCard","getCard","flipCard","addMove","checkMatch","timeCounter","resetGame","updateStatus","clearTimeout"],"mappings":"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","file":"bundle.js","sourcesContent":["class Card {\r\n\r\n  constructor(name, slot) {\r\n    this.name = name;\r\n    this.slot = slot;\r\n    this.board = document.querySelector('#board');\r\n    this.isTriggered = false;\r\n  }\r\n\r\n  flipCard() {\r\n\r\n    let selectedSlot = this.board.children[this.slot];\r\n\r\n    // Show card's name & add fliping animation\r\n    selectedSlot.classList.add('card-show', 'back-flip');\r\n\r\n    selectedSlot.classList.remove('card-cover');\r\n\r\n  }\r\n\r\n  static cardsMatch(card1, card2) {\r\n\r\n    let cards = [card1.board.children[card1.slot], card2.board.children[card2.slot]];\r\n\r\n    setTimeout(() => {\r\n      cards.forEach(c => {\r\n        c.children[1].classList.remove('touch');\r\n        c.classList.add('match', 'bounce');\r\n      });\r\n    }, 400);\r\n  }\r\n\r\n  static cardsNoMatch(card1, card2) {\r\n\r\n    let cards = [card1.board.children[card1.slot], card2.board.children[card2.slot]];\r\n\r\n    setTimeout(() => {\r\n      cards.forEach(c => {\r\n        c.classList.add('shake');\r\n        c.classList.remove('card-show');\r\n        c.classList.add('no-match');\r\n        setTimeout(() => {\r\n          c.classList.remove('no-match', 'back-flip', 'shake');\r\n        }, 700);\r\n        c.classList.add('card-cover');\r\n      });\r\n    }, 400);\r\n\r\n    card1.isTriggered = false;\r\n    card2.isTriggered = false;\r\n  }\r\n\r\n  static init() {\r\n    const board = document.body.querySelector('.board');\r\n\r\n    for (let el of board.children) {\r\n      let isFlipped = el.classList.contains('card-show');\r\n      isFlipped ? el.classList.replace('card-show', 'card-cover') : false;\r\n    }\r\n\r\n  }\r\n\r\n\r\n}\r\n","class Deck {\r\n\r\n  constructor() {\r\n    let cards = [];\r\n    this.cardsPair = [];\r\n    this.deckCards = []; // A shuffled deck of cards\r\n\r\n    let cardA = 'fas fa-coffee',\r\n        cardB = 'fab fa-docker',\r\n        cardC = 'fas fa-gamepad',\r\n        cardD = 'far fa-gem',\r\n        cardE = 'fas fa-heart',\r\n        cardF = 'far fa-lemon',\r\n        cardG = 'fas fa-rocket',\r\n        cardH = 'far fa-snowflake';\r\n\r\n    cards.push(cardA, cardB, cardC, cardD, cardE, cardF, cardG, cardH);\r\n    this.cardsPair = [...cards, ...cards];\r\n  }\r\n\r\n  // Shuffle cards and put them in randomized slots\r\n  shuffle(cardsCount) {\r\n    let takenSlots = [];    // Store random slot id without duplication\r\n    this.shuffleDeck = [];  // Shuffled cards in random slot\r\n\r\n    for (let card of this.cardsPair) {\r\n      this.shuffleDeck.push({name: card, slot: 0});\r\n    }\r\n\r\n    for (let i = 0; i < cardsCount; i++) {\r\n      let randomId = Math.floor(Math.random() * cardsCount);\r\n\r\n      // Regenerate random id if slot is taken, otherwise store random id to takenSlots\r\n      takenSlots.indexOf(randomId) == -1 ? takenSlots.push(randomId) : i--;\r\n\r\n      this.shuffleDeck[i].slot = takenSlots[i];\r\n    }\r\n  }\r\n\r\n  // Generate cards for deckCards[]\r\n  buildCards() {\r\n    for (let c of this.shuffleDeck) {\r\n      let card = new Card(c.name, c.slot);\r\n      this.deckCards.push(card);\r\n    }\r\n  }\r\n\r\n\r\n  buildCardsHTML() {\r\n    const board = document.body.querySelector('.board');\r\n\r\n    // Clear board\r\n    board.innerHTML = '';\r\n\r\n    this.deckCards.sort((a, b) => { return a.slot - b.slot });\r\n\r\n    for (let c of this.deckCards) {\r\n      let card = `<div id=\"${c.slot}\" class=\"card card-cover back\"><i class=\"${c.name}\"></i><div class=\"touch\"></div></div>`;\r\n      board.insertAdjacentHTML('beforeend', card);\r\n    }\r\n  }\r\n\r\n  // Return the card obj according to its slot ID\r\n  getCard(slotID) {\r\n    for (let card of this.deckCards) {\r\n      if (card.slot == slotID) {\r\n        return card;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","class StatusBoard {\r\n\r\n  init() {\r\n    this.moveCount  = 0;\r\n    this.maxClick   = 0;  // Player can only click twice for each turn\r\n    this.matchCount = 0;\r\n    this.starsCount = 3;\r\n    this.matchQueue = []; // Check if two cards in the queue are matched\r\n\r\n    // Reset star icons\r\n    this.threeStars  = document.querySelector('#three-stars');\r\n    this.twoStars    = document.querySelector('#two-stars');\r\n    this.oneStar     = document.querySelector('#one-star');\r\n\r\n    this.oneStar.classList.add('star-hide');\r\n    this.twoStars.classList.add('star-hide');\r\n    this.threeStars.classList.remove('star-hide');\r\n  }\r\n\r\n  addMove(selectedCard) {\r\n    this.maxClick++;\r\n    this.moveCount++;\r\n    this.matchQueue.push(selectedCard);\r\n    this.starsCount = (this.moveCount >= 30) ? 1 : (this.moveCount >= 20) ? 2 : 3;\r\n\r\n    // Update star icons\r\n    if (this.starsCount == 2) {\r\n      this.threeStars.classList.add('star-hide');\r\n      this.twoStars.classList.remove('star-hide');\r\n    } else if (this.starsCount == 1){\r\n      this.twoStars.classList.add('star-hide');\r\n      this.oneStar.classList.remove('star-hide');\r\n    }\r\n  }\r\n\r\n  checkMatch() {\r\n    if (this.matchQueue[0] && this.matchQueue[1]) {\r\n      if (this.matchQueue[1].name == this.matchQueue[0].name) {\r\n        // If two cards match, display two cards eternally\r\n        Card.cardsMatch(this.matchQueue[0], this.matchQueue[1]);\r\n        this.matchCount++;\r\n      } else {\r\n        // If two cards don't match, flip both cards back\r\n        Card.cardsNoMatch(this.matchQueue[0], this.matchQueue[1]);\r\n      }\r\n\r\n      // Reset maxClick and match queue\r\n      this.maxClick = 0;\r\n      this.matchQueue = [];\r\n    }\r\n  }\r\n\r\n}\r\n","let deck = new Deck();\r\nlet statusBoard = new StatusBoard();\r\n\r\nconst move        = document.querySelector('#move-count');\r\nconst statusMoves = document.querySelector('#status-moves');\r\nconst matchCount  = document.querySelector('#match-count');\r\nconst stars       = document.querySelector('#star-count');\r\nconst resetBtn    = document.querySelector('#reset');\r\nconst timerShown  = document.querySelector('#timer');\r\nconst scoreTimer  = document.querySelector('#score-timer');\r\nconst scoreBoard  = document.querySelector('#score-board');\r\n\r\nlet timeElapsed   = Number(timerShown.textContent);\r\nlet timer;\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n  deck.shuffle(16);\r\n  deck.buildCards();\r\n  deck.buildCardsHTML();\r\n\r\n  statusBoard.init();\r\n\r\n  // deck.deckCards.sort((a, b) => { return a.slot - b.slot });\r\n  // console.log(...deck.deckCards);\r\n});\r\n\r\ndocument.querySelector('main').addEventListener('click', (e) => {\r\n\r\n  // If click on card\r\n  if (e.target.classList.contains('touch')) {\r\n\r\n    let cardID = e.target.parentNode.id;\r\n\r\n    let currentCard = deck.getCard(cardID) || null;\r\n\r\n    // If card is already clicked\r\n    if (currentCard.isTriggered) return;\r\n    currentCard.isTriggered = true;\r\n\r\n    currentCard.flipCard();\r\n\r\n    // Add one move & push first card obj in pair queue\r\n    statusBoard.addMove(currentCard);\r\n\r\n    // Check if second card obj match in pair queue\r\n    statusBoard.checkMatch();\r\n\r\n    // When click on first card, start timer\r\n    move.textContent == 0 ? timer = setTimeout(timeCounter, 1000) : false;\r\n  }\r\n\r\n  // If click on reset button\r\n  e.target.id == 'reset' ? resetGame() : null;\r\n\r\n  // If click on replay button\r\n  e.target.id == 'replay' ? resetGame() : null;\r\n\r\n  updateStatus();\r\n}, true);\r\n\r\n\r\n// Show status on board\r\nconst updateStatus = () => {\r\n  move.textContent        = statusBoard.moveCount;\r\n  statusMoves.textContent = move.textContent;\r\n  matchCount.textContent  = statusBoard.matchCount;\r\n  stars.textContent       = statusBoard.starsCount;\r\n\r\n  // Stop timer when all cards are matched and show score board\r\n  if (matchCount.textContent == 8) {\r\n    scoreBoard.classList.remove('modal-hide');\r\n    scoreBoard.classList.add('modal-trans');\r\n    scoreTimer.textContent = timerShown.textContent;\r\n    setTimeout(() => {\r\n      scoreBoard.classList.add('modal-show');\r\n    }, 1200);\r\n    clearTimeout(timer);\r\n  } else if (matchCount.textContent == 0) {\r\n    scoreBoard.classList.remove('modal-show');\r\n  }\r\n\r\n}\r\n\r\nconst timeCounter = () => {\r\n  timeElapsed++;\r\n  timerShown.textContent = timeElapsed;\r\n  timer = setTimeout(timeCounter, 1000);\r\n}\r\n\r\nconst resetGame = () => {\r\n  // Reset deck\r\n  deck = new Deck();\r\n  deck.shuffle(16);\r\n  deck.buildCards();\r\n  deck.buildCardsHTML();\r\n\r\n  // Clear card pairs\r\n  Card.init();\r\n\r\n  // Reset moves, match count on status board\r\n  statusBoard.init();\r\n\r\n  // Reset timer\r\n  timeElapsed = 0;\r\n  timerShown.textContent = 0;\r\n  clearTimeout(timer);\r\n\r\n  // Hide score board\r\n  scoreBoard.classList.remove('modal-show', 'modal-trans');\r\n  scoreBoard.classList.add('modal-hide');\r\n}\r\n"]}