{"version":3,"sources":["card.js","deck.js","statusBoard.js","scoreBoard.js","main.js"],"names":["Card","name","slot","board","document","querySelector","selectedSlot","children","textContent","classList","add","remove","img","createElement","content","insertAdjacentHTML","appendChild","card1","card2","cards","setTimeout","forEach","c","body","el","isFlipped","contains","replace","Deck","cardsPair","deckCards","cardA","cardB","cardC","cardD","cardE","cardF","cardG","cardH","push","cardsCount","takenSlots","shuffleDeck","card","i","randomId","Math","floor","random","indexOf","sort","a","b","slotID","StatusBoard","moveCount","maxClick","matchCount","starsCount","matchQueue","selectedCard","cardsMatch","cardsNoMatch","ScoreBoard","finalResult","alert","deck","statusBoard","move","stars","resetBtn","timerShown","timeElapsed","Number","timer","addEventListener","shuffle","buildCards","buildCardsHTML","init","log","e","target","getCard","id","flipCard","addMove","checkMatch","console","timeCounter","resetGame","updateStatus","clearTimeout"],"mappings":"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","file":"bundle.js","sourcesContent":["class Card {\r\n\r\n  constructor(name, slot) {\r\n    this.name = name;\r\n    this.slot = slot;\r\n    this.board = document.querySelector('#board');\r\n    //TODO: Add image to card\r\n  }\r\n\r\n  flipCard() {\r\n\r\n    let selectedSlot = this.board.children[this.slot];\r\n\r\n    // Show card's name\r\n    selectedSlot.textContent = this.name;\r\n\r\n    selectedSlot.classList.add('card-show');\r\n    selectedSlot.classList.remove('card-cover');\r\n\r\n    // Show card's image\r\n    const img = document.createElement('img');\r\n\r\n    let content = `<img src=\"img/${this.name}.svg\" id=\"icon-${this.slot}\" class=\"card-icon-show\">`;\r\n\r\n    img.insertAdjacentHTML('afterbegin', content);\r\n\r\n    selectedSlot.appendChild(img);\r\n    // TODO: animate image\r\n  }\r\n\r\n  static cardsMatch(card1, card2) {\r\n    // TODO: When cards match, play animation\r\n    // this.board.children[this.slot].classList.remove('card-cover');\r\n  }\r\n\r\n  static cardsNoMatch(card1, card2) {\r\n\r\n    let cards = [card1.board.children[card1.slot], card2.board.children[card2.slot]];\r\n\r\n    setTimeout(() => {\r\n      cards.forEach(c => {\r\n        c.classList.remove('card-show');\r\n        c.classList.add('card-cover');\r\n        c.textContent = 'Flip back';\r\n      });\r\n    }, 500);\r\n    // TODO: play animation\r\n  }\r\n\r\n  static init() {\r\n    const board = document.body.querySelector('.board');\r\n\r\n    for (let el of board.children) {\r\n      el.textContent = 'reset card';\r\n      let isFlipped = el.classList.contains('card-show');\r\n      isFlipped ? el.classList.replace('card-show', 'card-cover') : false;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","class Deck {\r\n\r\n  constructor() {\r\n    let cards = [];\r\n    this.cardsPair = [];\r\n    this.deckCards = []; // A shuffled deck of cards\r\n\r\n    let cardA = 'coffee',\r\n        cardB = 'docker',\r\n        cardC = 'gamepad',\r\n        cardD = 'gem',\r\n        cardE = 'heart',\r\n        cardF = 'lemon',\r\n        cardG = 'rocket',\r\n        cardH = 'snowflake';\r\n\r\n    cards.push(cardA, cardB, cardC, cardD, cardE, cardF, cardG, cardH);\r\n    this.cardsPair = [...cards, ...cards];\r\n  }\r\n\r\n  // Shuffle cards and put them in randomized slots\r\n  shuffle(cardsCount) {\r\n    let takenSlots = [];    // Store random slot id without duplication\r\n    this.shuffleDeck = [];  // Shuffled cards in random slot\r\n\r\n    for (let card of this.cardsPair) {\r\n      this.shuffleDeck.push({name: card, slot: 0});\r\n    }\r\n\r\n    for (let i = 0; i < cardsCount; i++) {\r\n      let randomId = Math.floor(Math.random() * cardsCount);\r\n\r\n      // Regenerate random id if slot is taken, otherwise store random id to takenSlots\r\n      takenSlots.indexOf(randomId) == -1 ? takenSlots.push(randomId) : i--;\r\n\r\n      this.shuffleDeck[i].slot = takenSlots[i];\r\n    }\r\n  }\r\n\r\n  // Generate cards for deckCards[]\r\n  buildCards() {\r\n    for (let c of this.shuffleDeck) {\r\n      let card = new Card(c.name, c.slot);\r\n      this.deckCards.push(card);\r\n    }\r\n  }\r\n\r\n\r\n  buildCardsHTML() {\r\n    const board = document.body.querySelector('.board');\r\n\r\n    this.deckCards.sort((a, b) => { return a.slot - b.slot });\r\n\r\n    for (let c of this.deckCards) {\r\n      let card = `<div id=\"${c.slot}\" class=\"card card-cover\">\r\n                  <img src=\"img/${c.name}.svg\" id=\"icon-${c.slot}\"\r\n                  class=\"card-icon-hide\">Cover</div>`;\r\n\r\n      board.insertAdjacentHTML('beforeend', card);\r\n    }\r\n  }\r\n\r\n  // Return the card obj according to its slot ID\r\n  getCard(slotID) {\r\n    for (let card of this.deckCards) {\r\n      if (card.slot == slotID) {\r\n        return card;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","class StatusBoard {\r\n\r\n  init() {\r\n    this.moveCount  = 0;\r\n    this.maxClick   = 0;  // Player can only click twice for each turn\r\n    this.matchCount = 0;\r\n    this.starsCount = 3;\r\n    this.matchQueue = []; // Check if two cards in the queue are matched\r\n  }\r\n\r\n  addMove(selectedCard) {\r\n    this.maxClick++;\r\n    this.moveCount++;\r\n    this.matchQueue.push(selectedCard);\r\n    this.starsCount = (this.moveCount >= 30) ? 1 : (this.moveCount >= 20) ? 2 : 3;\r\n  }\r\n\r\n  checkMatch() {\r\n    if (this.matchQueue[0] && this.matchQueue[1]) {\r\n      if (this.matchQueue[1].name == this.matchQueue[0].name) {\r\n        // If two cards match, display two cards eternally\r\n        Card.cardsMatch(this.matchQueue[0], this.matchQueue[1]);\r\n        this.matchCount++;\r\n      } else {\r\n        // If two cards don't match, flip both cards back\r\n        Card.cardsNoMatch(this.matchQueue[0], this.matchQueue[1]);\r\n      }\r\n\r\n      this.matchCount == 8 ? ScoreBoard.finalResult() : false;\r\n\r\n      // Reset maxClick and match queue\r\n      this.maxClick = 0;\r\n      this.matchQueue = [];\r\n    }\r\n  }\r\n\r\n}\r\n","class ScoreBoard {\r\n\r\n  static finalResult() {\r\n    alert('Stage clear!');\r\n  }\r\n\r\n  // TODO: Build socre board modal\r\n}\r\n","let deck = new Deck();\r\nlet statusBoard = new StatusBoard();\r\n\r\nconst move        = document.querySelector('#move-count');\r\nconst matchCount  = document.querySelector('#match-count');\r\nconst stars       = document.querySelector('#stars');\r\nconst resetBtn    = document.querySelector('#reset');\r\nconst timerShown  = document.querySelector('#timer');\r\nlet timeElapsed   = Number(timerShown.textContent);\r\nlet timer;\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n  deck.shuffle(16);\r\n  deck.buildCards();\r\n  deck.buildCardsHTML();\r\n\r\n  statusBoard.init();\r\n\r\n  deck.deckCards.sort((a, b) => { return a.slot - b.slot });\r\n  console.log(...deck.deckCards);\r\n});\r\n\r\ndocument.querySelector('main').addEventListener('click', (e) => {\r\n\r\n  // If click on card\r\n  if (e.target.classList.contains('card-cover')) {\r\n\r\n     // Return a card of Card class\r\n    let selectedCard = deck.getCard(e.target.id) || null;\r\n\r\n    selectedCard.flipCard();\r\n\r\n    // Add one move & push first card obj in pair queue\r\n    statusBoard.addMove(selectedCard);\r\n\r\n    // Check if second card obj match in pair queue\r\n    statusBoard.checkMatch();\r\n\r\n    for (let i of statusBoard.matchQueue) {\r\n      console.log(`click count: ${statusBoard.maxClick} || ${i.name} in match queue`);\r\n    }\r\n    console.log(statusBoard);\r\n\r\n    // TODO: Disable click when playing card animation\r\n\r\n    // When click on first card, start timer\r\n    move.textContent == 0 ? timer = setTimeout(timeCounter, 1000) : false;\r\n  }\r\n\r\n  // If click on reset button\r\n  e.target.id == 'reset' ? resetGame() : null;\r\n\r\n  updateStatus();\r\n}, true);\r\n\r\n// Show status on board\r\nconst updateStatus = () => {\r\n  move.textContent        = statusBoard.moveCount;\r\n  matchCount.textContent  = statusBoard.matchCount;\r\n  stars.textContent       = statusBoard.starsCount;\r\n\r\n  // Stop timer when all cards are matched\r\n  matchCount.textContent == 8 ? clearTimeout(timer) : null;\r\n}\r\n\r\nconst timeCounter = () => {\r\n  timeElapsed++;\r\n  timerShown.textContent = timeElapsed;\r\n  timer = setTimeout(timeCounter, 1000);\r\n}\r\n\r\nconst resetGame = () => {\r\n  // Reset deck\r\n  deck = new Deck();\r\n  deck.shuffle(16);\r\n  deck.buildCards();\r\n\r\n  // Clear card pairs\r\n  Card.init();\r\n\r\n  // Reset moves, match count on status board\r\n  statusBoard.init();\r\n\r\n  // Reset timer\r\n  timeElapsed = 0;\r\n  timerShown.textContent = 0;\r\n  clearTimeout(timer);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////\r\n"]}