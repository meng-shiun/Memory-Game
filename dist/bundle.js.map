{"version":3,"sources":["js/card.js","js/deck.js","js/main.js","js/reset.js","js/scoreBoard.js","js/statusBoard.js"],"names":["Card","name","slot","board","document","querySelector","children","textContent","classList","add","remove","Deck","cards","cardsPair","deckCards","cardA","cardB","cardC","cardD","cardE","cardF","cardG","cardH","push","cardsCount","takenSlots","shuffleDeck","card","i","randomId","Math","floor","random","indexOf","el","slotID","deck","addEventListener","shuffle","buildCards","sort","a","b","console","log","evt","target","contains","getCard","id","flipCard"],"mappings":"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","file":"bundle.js","sourcesContent":["class Card {\r\n\r\n  constructor(name, slot) {\r\n    this.name = name;\r\n    this.slot = slot;\r\n    this.board = document.querySelector('#board');\r\n    //TODO: Add image to card\r\n  }\r\n\r\n  // Show card's name\r\n  flipCard() {\r\n    this.board.children[this.slot].textContent = this.name;\r\n\r\n    this.board.children[this.slot].classList.add('card-show');\r\n    // TODO: animate image\r\n  }\r\n\r\n  // TODO: when two cards match / don't match\r\n  cardsMatch() {\r\n    // TODO: Once the cards match, disable click\r\n    this.board.children[this.slot].classList.remove('card-cover');\r\n  }\r\n\r\n  cardsNoMatch() {\r\n\r\n  }\r\n\r\n\r\n}\r\n","class Deck {\r\n\r\n  constructor() {\r\n    let cards = [];\r\n    this.cardsPair = [];\r\n    this.deckCards = []; // A shuffled deck of cards\r\n\r\n    let cardA = 'Cat',\r\n        cardB = 'Orange',\r\n        cardC = '333',\r\n        cardD = 'Space',\r\n        cardE = 'Game',\r\n        cardF = 'Cake',\r\n        cardG = 'Apple',\r\n        cardH = 'Tree';\r\n\r\n    cards.push(cardA, cardB, cardC, cardD, cardE, cardF, cardG, cardH);\r\n    this.cardsPair = [...cards, ...cards];\r\n  }\r\n\r\n  // Shuffle cards and put them in randomized slots\r\n  shuffle(cardsCount) {\r\n    let takenSlots = []; // Store random slot id without duplication\r\n    this.shuffleDeck = []; // Shuffled cards in random slot\r\n\r\n    for (let card of this.cardsPair) {\r\n      this.shuffleDeck.push({name: card, slot: 0});\r\n    }\r\n\r\n    for (let i = 0; i < cardsCount; i++) {\r\n      let randomId = Math.floor(Math.random() * cardsCount);\r\n\r\n      // Regenerate random id if slot is taken, otherwise store random id to takenSlots\r\n      takenSlots.indexOf(randomId) == -1 ? takenSlots.push(randomId) : i--;\r\n\r\n      this.shuffleDeck[i].slot = takenSlots[i];\r\n    }\r\n  }\r\n\r\n  // Generate cards in random slot\r\n  buildCards() {\r\n    for (let el of this.shuffleDeck) {\r\n      let card = new Card(el.name, el.slot);\r\n      this.deckCards.push(card);\r\n    }\r\n  }\r\n\r\n  // Get the card according to its slot ID\r\n  getCard(slotID) {\r\n    for (let card of this.deckCards) {\r\n      if (card.slot == slotID) {\r\n        return card;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n// TODO: Check if two cards match\r\n","const deck = new Deck();\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  deck.shuffle(16);\r\n  deck.buildCards();\r\n\r\n  deck.deckCards.sort((a, b) => { return a.slot - b.slot });\r\n  for (let el of deck.deckCards) {\r\n    console.log(`slot: ${el.slot}, name: ${el.name}`);\r\n  }\r\n  console.log(...deck.deckCards);\r\n});\r\n\r\n\r\n// If click on a card, get the corresponding card\r\ndocument.addEventListener('click', (evt) => {\r\n  if (evt.target.classList.contains('card-cover')) {\r\n    let card = deck.getCard(evt.target.id);\r\n    card.flipCard();\r\n    //TODO: add one move\r\n    //TODO: push the first card name in pair queue\r\n  }\r\n}, true);\r\n","","",""]}